{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bac412e1-d12e-4d77-a7e1-8affb415f180",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: faker in c:\\users\\rajes\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (37.4.2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Could not find a version that satisfies the requirement os (from versions: none)\n",
      "ERROR: No matching distribution found for os\n"
     ]
    }
   ],
   "source": [
    "# !pip install faker os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "db2a1af8-a59a-43cc-8ca9-781100c10e64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "✅ All CSV files saved successfully in: C:\\Users\\Rajes\\Documents\\CompanySimulation\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "from faker import Faker\n",
    "from pathlib import Path\n",
    "\n",
    "# --- Setup ---\n",
    "fake = Faker()\n",
    "random.seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# --- Configuration ---\n",
    "num_companies = 100\n",
    "years = list(range(2010, 2025))\n",
    "quarters = ['Q1', 'Q2', 'Q3', 'Q4']\n",
    "periods = [(q, y) for y in years for q in quarters]\n",
    "num_periods = len(periods)\n",
    "\n",
    "sectors = ['Technology', 'Finance', 'Healthcare', 'Energy', 'Retail', 'Industrial', 'Utilities']\n",
    "countries = ['USA', 'Germany', 'India', 'Japan', 'Brazil', 'Canada', 'UK']\n",
    "\n",
    "# --- Directory Setup ---\n",
    "output_dir = Path.home() / \"Documents\" / \"CompanySimulation\"\n",
    "output_dir.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "# --- 1. Companies Table ---\n",
    "companies = [\n",
    "    [\n",
    "        f\"CMP{i+1:04d}\",\n",
    "        fake.company(),\n",
    "        random.choice(sectors),\n",
    "        random.choice(countries),\n",
    "        random.randint(1900, 2005)\n",
    "    ]\n",
    "    for i in range(num_companies)\n",
    "]\n",
    "df_companies = pd.DataFrame(companies, columns=[\"CompanyID\", \"CompanyName\", \"Sector\", \"Country\", \"FoundedYear\"])\n",
    "\n",
    "# --- 2. Time Periods Table ---\n",
    "df_time = pd.DataFrame([(i + 1, q, y) for i, (q, y) in enumerate(periods)], columns=[\"PeriodID\", \"Quarter\", \"Year\"])\n",
    "period_id_map = {(q, y): i + 1 for i, (q, y) in enumerate(periods)}\n",
    "\n",
    "# --- 3. Generate Data ---\n",
    "financial_records, stock_prices, esg_scores, employees, rnd_expenses = [], [], [], [], []\n",
    "\n",
    "record_id = price_id = esg_id = emp_id = rnd_id = 1\n",
    "\n",
    "for company in df_companies.itertuples(name='Company'):\n",
    "    for q, y in periods:\n",
    "        period_id = period_id_map[(q, y)]\n",
    "        scale = np.random.uniform(1, 20)\n",
    "\n",
    "        revenue = np.round(np.random.normal(100, 30) * scale, 2)\n",
    "        op_cost = np.round(revenue * np.random.uniform(0.6, 0.85), 2)\n",
    "        profit = revenue - op_cost\n",
    "        assets = np.round(revenue * np.random.uniform(1.2, 2.5), 2)\n",
    "        liabilities = np.round(assets * np.random.uniform(0.4, 0.8), 2)\n",
    "        financial_records.append([record_id, company.CompanyID, period_id, revenue, op_cost, profit, assets, liabilities])\n",
    "        record_id += 1\n",
    "\n",
    "        price = np.round(np.random.uniform(5, 200), 2)\n",
    "        market_cap = np.round((price * np.random.uniform(10_000, 100_000)) / 1e6, 2)\n",
    "        stock_prices.append([price_id, company.CompanyID, period_id, price, market_cap])\n",
    "        price_id += 1\n",
    "\n",
    "        env_score = np.round(np.random.uniform(40, 100), 2)\n",
    "        soc_score = np.round(np.random.uniform(30, 90), 2)\n",
    "        gov_score = np.round(np.random.uniform(30, 90), 2)\n",
    "        esg_scores.append([esg_id, company.CompanyID, period_id, env_score, soc_score, gov_score])\n",
    "        esg_id += 1\n",
    "\n",
    "        emp_count = int(np.round(scale * np.random.uniform(50, 500)))\n",
    "        avg_salary = np.round(np.random.uniform(30, 120), 2)\n",
    "        employees.append([emp_id, company.CompanyID, period_id, emp_count, avg_salary])\n",
    "        emp_id += 1\n",
    "\n",
    "        rnd_spend = np.round(\n",
    "            np.random.normal(5, 2) * scale if company.Sector in ['Technology', 'Healthcare']\n",
    "            else np.random.normal(1, 0.5) * scale, 2\n",
    "        )\n",
    "        rnd_expenses.append([rnd_id, company.CompanyID, period_id, rnd_spend])\n",
    "        rnd_id += 1\n",
    "\n",
    "# --- 4. DataFrames ---\n",
    "df_financial = pd.DataFrame(financial_records, columns=[\"RecordID\", \"CompanyID\", \"PeriodID\", \"Revenue\", \"OperatingCost\", \"NetProfit\", \"Assets\", \"Liabilities\"])\n",
    "df_stock = pd.DataFrame(stock_prices, columns=[\"PriceID\", \"CompanyID\", \"PeriodID\", \"ClosingPrice\", \"MarketCap\"])\n",
    "df_esg = pd.DataFrame(esg_scores, columns=[\"ESGID\", \"CompanyID\", \"PeriodID\", \"EnvironmentalScore\", \"SocialScore\", \"GovernanceScore\"])\n",
    "df_employees = pd.DataFrame(employees, columns=[\"EmployeeSnapshotID\", \"CompanyID\", \"PeriodID\", \"EmployeeCount\", \"AvgSalary\"])\n",
    "df_rnd = pd.DataFrame(rnd_expenses, columns=[\"RnDID\", \"CompanyID\", \"PeriodID\", \"RnDSpending\"])\n",
    "\n",
    "# --- 5. Sector Averages ---\n",
    "df_sector_avg = df_financial.merge(df_companies[[\"CompanyID\", \"Sector\"]], on=\"CompanyID\")\n",
    "df_sector_avg = df_sector_avg.groupby([\"Sector\", \"PeriodID\"]).agg(\n",
    "    AvgRevenue=(\"Revenue\", \"mean\"),\n",
    "    AvgProfit=(\"NetProfit\", \"mean\")\n",
    ").reset_index()\n",
    "\n",
    "df_market = df_stock.merge(df_companies[[\"CompanyID\", \"Sector\"]], on=\"CompanyID\")\n",
    "df_sector_market = df_market.groupby([\"Sector\", \"PeriodID\"]).agg(\n",
    "    AvgMarketCap=(\"MarketCap\", \"mean\")\n",
    ").reset_index()\n",
    "\n",
    "df_esg_avg = df_esg.merge(df_companies[[\"CompanyID\", \"Sector\"]], on=\"CompanyID\")\n",
    "df_esg_avg[\"ESGScore\"] = df_esg_avg[[\"EnvironmentalScore\", \"SocialScore\", \"GovernanceScore\"]].mean(axis=1).round(2)\n",
    "df_sector_esg = df_esg_avg.groupby([\"Sector\", \"PeriodID\"]).agg(\n",
    "    AvgESGScore=(\"ESGScore\", \"mean\")\n",
    ").reset_index()\n",
    "\n",
    "df_sector_final = df_sector_avg.merge(df_sector_market, on=[\"Sector\", \"PeriodID\"]).merge(df_sector_esg, on=[\"Sector\", \"PeriodID\"])\n",
    "df_sector_final.reset_index(drop=True, inplace=True)\n",
    "df_sector_final.insert(0, \"SectorAverageID\", df_sector_final.index + 1)\n",
    "\n",
    "# --- 6. Export CSVs ---\n",
    "df_companies.to_csv(output_dir / \"Companies.csv\", index=False)\n",
    "df_time.to_csv(output_dir / \"TimePeriods.csv\", index=False)\n",
    "df_financial.to_csv(output_dir / \"FinancialMetrics.csv\", index=False)\n",
    "df_stock.to_csv(output_dir / \"StockPrices.csv\", index=False)\n",
    "df_esg.to_csv(output_dir / \"ESGScores.csv\", index=False)\n",
    "df_employees.to_csv(output_dir / \"Employees.csv\", index=False)\n",
    "df_rnd.to_csv(output_dir / \"RnDExpenditure.csv\", index=False)\n",
    "df_sector_final.to_csv(output_dir / \"SectorAverages.csv\", index=False)\n",
    "\n",
    "print(f\"\\n✅ All CSV files saved successfully in: {output_dir}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3967263f-770d-4bbb-acd5-0b3d655beca3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
